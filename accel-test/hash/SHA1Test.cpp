#include "accelpp/hash/SHA1.hpp"

#define ConstAsciiString(s) s, sizeof(s) - 1

namespace accel::test {

	bool SHA1_CorrectnessTest() {

        // Generated by Python 3.6.3
        // SHA1("") = da39a3ee5e6b4b0d3255bfef95601890afd80709
        // SHA1("a") = 86f7e437faa5a7fce15d1ddcb9eaeaea377667b8
        // SHA1("abc") = a9993e364706816aba3e25717850c26c9cd0d89d
        // SHA1("message digest") = c12252ceda8be8994d5fa0290a47231c1d16aae3
        // SHA1("abcdefghijklmnopqrstuvwxyz") = 32d10c7b8cf96570ca04ce37f2a19d84240d3a89
        // SHA1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789") = 761c457bf73b14d27e9e9265c46f4b4dda11f940
        // SHA1("12345678901234567890123456789012345678901234567890123456789012345678901234567890") = 50abf5706a150990a08b2c5ea40fa0e585554732

        accelpp::hash::SHA1::HashValue sha1_correct_value[7] = { 
            { 0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90, 0xaf, 0xd8, 0x07, 0x09 },
            { 0x86, 0xf7, 0xe4, 0x37, 0xfa, 0xa5, 0xa7, 0xfc, 0xe1, 0x5d, 0x1d, 0xdc, 0xb9, 0xea, 0xea, 0xea, 0x37, 0x76, 0x67, 0xb8 },
            { 0xa9, 0x99, 0x3e, 0x36, 0x47, 0x06, 0x81, 0x6a, 0xba, 0x3e, 0x25, 0x71, 0x78, 0x50, 0xc2, 0x6c, 0x9c, 0xd0, 0xd8, 0x9d },
            { 0xc1, 0x22, 0x52, 0xce, 0xda, 0x8b, 0xe8, 0x99, 0x4d, 0x5f, 0xa0, 0x29, 0x0a, 0x47, 0x23, 0x1c, 0x1d, 0x16, 0xaa, 0xe3 },
            { 0x32, 0xd1, 0x0c, 0x7b, 0x8c, 0xf9, 0x65, 0x70, 0xca, 0x04, 0xce, 0x37, 0xf2, 0xa1, 0x9d, 0x84, 0x24, 0x0d, 0x3a, 0x89 },
            { 0x76, 0x1c, 0x45, 0x7b, 0xf7, 0x3b, 0x14, 0xd2, 0x7e, 0x9e, 0x92, 0x65, 0xc4, 0x6f, 0x4b, 0x4d, 0xda, 0x11, 0xf9, 0x40 },
            { 0x50, 0xab, 0xf5, 0x70, 0x6a, 0x15, 0x09, 0x90, 0xa0, 0x8b, 0x2c, 0x5e, 0xa4, 0x0f, 0xa0, 0xe5, 0x85, 0x55, 0x47, 0x32 }
        };

        accelpp::hash::SHA1 sha1;
        if (sha1.Digest() != sha1_correct_value[0])
            return false;

        sha1.Update("a", 1);
        if (sha1.Digest() != sha1_correct_value[1])
            return false;

        sha1.Update("bc", 2);
        if (sha1.Digest() != sha1_correct_value[2])
            return false;

        sha1.Reset();
        sha1.Update("message digest", 14);
        if (sha1.Digest() != sha1_correct_value[3])
            return false;

        sha1.Reset();
        sha1.Update(ConstAsciiString("abcdefghijklmnopqrstuvwxyz"));
        if (sha1.Digest() != sha1_correct_value[4])
            return false;

        sha1.Reset();
        sha1.Update(ConstAsciiString("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"));
        if (sha1.Digest() != sha1_correct_value[5])
            return false;

        sha1.Reset();
        sha1.Update(ConstAsciiString("12345678901234567890123456789012345678901234567890123456789012345678901234567890"));
        if (sha1.Digest() != sha1_correct_value[6])
            return false;

        const char CustomString[] = "The quick brown fox jumps over the lazy dog";
        accelpp::hash::SHA1::HashValue sha1_CustomString = { 0x2f, 0xd4, 0xe1, 0xc6, 0x7a, 0x2d, 0x28, 0xfc, 0xed, 0x84, 0x9e, 0xe1, 0xbb, 0x76, 0xe7, 0x39, 0x1b, 0x93, 0xeb, 0x12 };
        return accelpp::hash::SHA1(ConstAsciiString(CustomString)).Digest() == sha1_CustomString;
	}

}